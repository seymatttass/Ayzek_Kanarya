# -*- coding: utf-8 -*-
"""cnn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hAEhQFrpojXEaiO5PrsCmLiXW5jXxiaO
"""

from google.colab import drive
drive.mount("/content/drive")

from tensorflow.python.client import device_lib
device_lib.list_local_devices()

import os
os.chdir("/content/drive/MyDrive/dataset1")

# Kütüphaneleri içe aktarma
from __future__ import print_function
import keras
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam
from keras import backend as K
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
import os

# Parametreler
batch_size = 16  # Her bir işlemde kullanılacak örnek sayısı
num_classes = 4  # Sınıf sayısı: sağlıklı, fungal, ölü, bakterili
epochs = 25  # Eğitim döngüsü sayısı
img_rows, img_cols = 224, 224  # Giriş görüntüsünün boyutları

# Girdi boyutunu belirleme (kanal düzenine göre)
if K.image_data_format() == 'channels_first':
    input_shape = (3, img_rows, img_cols)  # Kanal ilk format
else:
    input_shape = (img_rows, img_cols, 3)  # Kanal son format

# Veri dizinlerinin varlığını kontrol etme
train_dir = '/content/drive/MyDrive/AYZEK-Kanarya/dataset/train'
test_dir = '/content/drive/MyDrive/AYZEK-Kanarya/dataset/test'
val_dir = '/content/drive/MyDrive/AYZEK-Kanarya/dataset/val'

if not os.path.exists(train_dir):
    print(f"{train_dir} dizini bulunamadı.")
if not os.path.exists(val_dir):
    print(f"{val_dir} dizini bulunamadı.")
if not os.path.exists(test_dir):
    print(f"{test_dir} dizini bulunamadı.")

# Veri artırma ve normalleştirme
train_datagen = ImageDataGenerator(
    rescale=1./255,  # Tüm piksel değerlerini 0-1 aralığına yeniden ölçekleme
    shear_range=0.2,  # Rastgele kesme işlemi
    zoom_range=0.2,  # Rastgele yakınlaştırma
    horizontal_flip=True)  # Yatay çevirme

validation_datagen = ImageDataGenerator(rescale=1./255)  # Doğrulama verileri için sadece yeniden ölçekleme
test_datagen = ImageDataGenerator(rescale=1./255)  # Test verileri için sadece yeniden ölçekleme

# Eğitim veri yükleyicisi
train_generator = train_datagen.flow_from_directory(
    train_dir,  # Eğitim veri dizini
    target_size=(img_rows, img_cols),  # Hedef görüntü boyutu
    batch_size=batch_size,  # Batch boyutu
    class_mode='categorical')  # Çok sınıflı sınıflandırma

# Doğrulama veri yükleyicisi
validation_generator = validation_datagen.flow_from_directory(
    val_dir,  # Doğrulama veri dizini
    target_size=(img_rows, img_cols),  # Hedef görüntü boyutu
    batch_size=batch_size,  # Batch boyutu
    class_mode='categorical')  # Çok sınıflı sınıflandırma

# Test veri yükleyicisi
test_generator = test_datagen.flow_from_directory(
    test_dir,  # Test veri dizini
    target_size=(img_rows, img_cols),  # Hedef görüntü boyutu
    batch_size=batch_size,  # Batch boyutu
    class_mode='categorical')  # Çok sınıflı sınıflandırma

# Veri yükleyicilerinin şekillerini kontrol etme
print("train_generator shape:", train_generator[0][0].shape)  # Eğitim verisinin şekli
print("train_generator labels shape:", train_generator[0][1].shape)  # Eğitim verisi etiketlerinin şekli
print("validation_generator shape:", validation_generator[0][0].shape)  # Doğrulama verisinin şekli
print("validation_generator labels shape:", validation_generator[0][1].shape)  # Doğrulama verisi etiketlerinin şekli
print("test_generator shape:", test_generator[0][0].shape)  # Test verisinin şekli
print("test_generator labels shape:", test_generator[0][1].shape)  # Test verisi etiketlerinin şekli

# Modeli oluşturma
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=input_shape))  # 32 filtreli 3x3 boyutunda bir evrişim katmanı ekleyin
model.add(MaxPooling2D((2, 2)))  # 2x2 boyutunda bir maksimum havuzlama katmanı ekleyin
model.add(Conv2D(64, (3, 3), activation='relu'))  # 64 filtreli 3x3 boyutunda bir evrişim katmanı ekleyin
model.add(MaxPooling2D((2, 2)))  # 2x2 boyutunda bir maksimum havuzlama katmanı ekleyin
model.add(Conv2D(128, (3, 3), activation='relu'))  # 128 filtreli 3x3 boyutunda bir evrişim katmanı ekleyin
model.add(MaxPooling2D((2, 2)))  # 2x2 boyutunda bir maksimum havuzlama katmanı ekleyin
model.add(Flatten())  # Düzleştirme katmanı ekleyin
model.add(Dense(512, activation='relu'))  # 512 nöronlu tam bağlantılı katman ekleyin
model.add(Dropout(0.5))  # Overfitting'i önlemek için Dropout katmanı ekleyin
model.add(Dense(num_classes, activation='softmax'))  # Çıkış katmanı, sınıf sayısı kadar nöron ve softmax aktivasyon fonksiyonu

# Modeli derleme
model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])  # Adam optimizasyonu ve çapraz entropi kaybı kullanarak derleme

checkpoint = ModelCheckpoint(
    f'/content/drive/MyDrive/AYZEK-Kanarya/models/cnn/cnn_model1.h5',
     monitor='val_accuracy',
     verbose=1,
     save_best_only=True,
     mode = 'max'
)

earlystop = EarlyStopping(monitor='val_accuracy',
                          patience=5,
                          verbose=1,
                          mode = 'max')

# Modeli eğitme
history = model.fit(
    train_generator,  # Eğitim veri yükleyicisi
    steps_per_epoch=train_generator.samples // batch_size,  # Bir epoch tamamlamak için adım sayısı
    epochs=epochs,  # Eğitim döngüsü sayısı
    validation_data=validation_generator,  # Doğrulama veri yükleyicisi
    validation_steps=validation_generator.samples // batch_size,
    callbacks = [earlystop, checkpoint])

# Eğitim doğruluğunu yazdırma
train_acc = history.history['accuracy']  # Eğitim doğruluğunu alın
val_acc = history.history['val_accuracy']  # Doğrulama doğruluğunu alın
print('Training accuracy:', train_acc)  # Eğitim doğruluğunu yazdırın
print('Validation accuracy:', val_acc)  # Doğrulama doğruluğunu yazdırın

# Modeli değerlendirme
test_loss, test_acc = model.evaluate(test_generator, steps=test_generator.samples // batch_size)  # Test verisini değerlendirin
print('Test accuracy:', test_acc)  # Test doğruluğunu yazdırın

